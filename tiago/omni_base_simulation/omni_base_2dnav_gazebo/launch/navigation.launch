<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <arg name="state" default="localization"/>

  <arg name="planner"         default="base"/>
  <arg name="global_planner"  default="global_planner"/>
  <arg name="local_planner"   default="pal"/>
  <arg name="localization"    default="amcl"/>
  <arg name="mapping"         default="karto"/>
  <arg name="public_sim"      default="false"/>
  <arg name="robot_namespace" default=""/>
  <arg name="multiple"        default="false"/>
  <arg name="laser_model"     default="sick-561"/>
  <arg name="map"             default="$(env HOME)/.pal/omni_base_maps/config"/>
  <arg name="is_fleet"        default="false"/>

  <!-- Map -->
  <!-- Localization or Mapping state -->
  <group if="$(arg public_sim)">
    <node pkg="pal_navigation_sm" type="navigation.sh" name="navigation"
        args="omni_base $(arg state) $(arg localization) $(arg mapping) $(arg map) scan $(arg laser_model)"/>
  </group>

  <group unless="$(arg public_sim)">
    <include file="$(find pal_map_manager)/launch/pal_map_manager.launch">
      <arg name="map"           value="$(arg map)"/>
      <arg name="namespace"     value="$(arg robot_namespace)"/>
      <arg name="use_hostname"  value="false"/>
    </include>
  </group>

  <!-- Navigation State Machine -->
  <include file="$(find omni_base_2dnav)/launch/state_machine.launch">
    <arg name="state"           value="$(arg state)"/>
    <arg name="public_sim"      value="$(arg public_sim)"/>
    <arg name="is_sim"          value="true"/>
    <arg name="multiple"        value="$(arg multiple)"/>
    <arg name="robot_namespace" value="$(arg robot_namespace)"/>
    <arg if="$(arg multiple)" name="map_frame" value="/$(arg robot_namespace)/map"/>
    <arg if="$(arg multiple)" name="base_frame" value="/$(arg robot_namespace)/base_footprint"/>
    <arg name="is_fleet"        value="$(arg is_fleet)"/>
  </include>

  <!-- Planning -->
  <include file="$(find omni_base_2dnav)/launch/move_$(arg planner).launch">
    <arg name="global_planner"  value="$(arg global_planner)"/>
    <arg name="local_planner"   value="$(arg local_planner)"/>
    <arg name="public_sim"      value="$(arg public_sim)"/>
    <arg name="robot_namespace" value="$(arg robot_namespace)"/>
    <arg name="multiple"        value="$(arg multiple)"/>
  </include>

  <include file="$(find robot_pose)/launch/robot_pose.launch">
    <arg name="robot_prefix"      value="$(arg robot_namespace)"/>
  </include>
  
  <!-- Laser Scan Merger -->
  <node pkg="ira_laser_tools" name="laserscan_multi_merger" type="laserscan_multi_merger" output="screen"
    launch-prefix="bash -c 'sleep 5; $0 $@' ">
    <param if="$(arg multiple)" name="destination_frame" value="$(arg robot_namespace)/virtual_base_laser_link"/>
    <param unless="$(arg multiple)" name="destination_frame" value="virtual_base_laser_link"/>
    <param name="cloud_destination_topic" value="/merged_cloud"/>
    <param if="$(arg multiple)" name="scan_destination_topic" value="/$(arg robot_namespace)/scan_raw"/>
    <param unless="$(arg multiple)" name="scan_destination_topic" value="scan_raw"/>
    <param if="$(arg multiple)" name="laserscan_topics" value ="/$(arg robot_namespace)/scan_front_raw /$(arg robot_namespace)/scan_rear_raw" /> 
    <param unless="$(arg multiple)" name="laserscan_topics" value ="/scan_front_raw /scan_rear_raw" /> 
    <param name="time_increment" value ="0.0" /> 
    <param name="scan_time" value ="0.0" /> 
    <param name="range_min" value ="0.05" /> 
    <param name="range_max" value ="25.0" /> 
    <param name="angle_min" value ="-3.1459" /> 
    <param name="angle_max" value ="3.1459" /> 
    <param name="angle_increment" value ="0.005769" /> 
  </node>

  <!-- Laser filter (empty for public sim) -->
  <node name="laser_filter" pkg="laser_filters" type="scan_to_scan_filter_chain">
    <rosparam file="$(find omni_base_laser_sensors)/config/$(arg laser_model)_filter.yaml"
              command="load"
              unless="$(eval arg('public_sim') or arg('multiple'))"/>
    <remap from="scan"          to="scan_raw"/>
    <remap from="scan_filtered" to="scan"/>
  </node>
  
  <group unless="$(arg public_sim)">
    <!-- VO map server -->
    <include file="$(find pal_vo_server)/launch/vo_server.launch"/>
  </group>


</launch>
